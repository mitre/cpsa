(comment "CPSA 4.4.0")
(comment "All input read from kerb_sas.scm")

(defprotocol kerb-flawed basic
  (defrole init
    (vars (a b s name) (m n text) (k skey))
    (trace (send (cat a b n))
      (recv (cat (enc k n (ltk a s)) (enc k a b (ltk b s))))
      (send (cat (enc m k) (enc k a b (ltk b s)))))
    (uniq-orig n))
  (defrole resp
    (vars (a b s name) (m text) (k skey))
    (trace (recv (cat (enc m k) (enc k a b (ltk b s))))))
  (defrole keyserv
    (vars (a b s name) (n text) (k skey))
    (trace (recv (cat a b n))
      (send (cat (enc k n (ltk a s)) (enc k a b (ltk b s)))))
    (uniq-orig k))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false)))))

(defskeleton kerb-flawed
  (vars (k skey) (m n text) (a b s name))
  (deflistener m)
  (defstrand init 3 (k k) (m m) (n n) (a a) (b b) (s s))
  (non-orig (ltk a s) (ltk b s))
  (uniq-orig m n)
  (goals
    (forall ((k skey) (m n text) (a b s name) (z z-0 strd))
      (implies
        (and (p "init" z 3) (p "" z-0 2) (p "init" "k" z k)
          (p "init" "m" z m) (p "init" "n" z n) (p "init" "a" z a)
          (p "init" "b" z b) (p "init" "s" z s) (p "" "x" z-0 m)
          (non (ltk a s)) (non (ltk b s)) (uniq-at n z 0)
          (uniq-at m z 2)) (false))))
  (traces ((recv m) (send m))
    ((send (cat a b n))
      (recv (cat (enc k n (ltk a s)) (enc k a b (ltk b s))))
      (send (cat (enc m k) (enc k a b (ltk b s))))))
  (label 0)
  (unrealized (0 0) (1 1))
  (preskeleton)
  (origs (n (1 0)) (m (1 2)))
  (comment "Not a skeleton"))

(defskeleton kerb-flawed
  (vars (k skey) (m n text) (a b s name))
  (deflistener m)
  (defstrand init 3 (k k) (m m) (n n) (a a) (b b) (s s))
  (precedes ((1 2) (0 0)))
  (non-orig (ltk a s) (ltk b s))
  (uniq-orig m n)
  (traces ((recv m) (send m))
    ((send (cat a b n))
      (recv (cat (enc k n (ltk a s)) (enc k a b (ltk b s))))
      (send (cat (enc m k) (enc k a b (ltk b s))))))
  (label 1)
  (parent 0)
  (unrealized (1 1))
  (origs (n (1 0)) (m (1 2)))
  (comment "1 in cohort - 1 not yet seen"))

(defskeleton kerb-flawed
  (vars (k skey) (m n text) (a b s b-0 name))
  (deflistener m)
  (defstrand init 3 (k k) (m m) (n n) (a a) (b b) (s s))
  (defstrand keyserv 2 (k k) (n n) (a a) (b b-0) (s s))
  (precedes ((1 0) (2 0)) ((1 2) (0 0)) ((2 1) (1 1)))
  (non-orig (ltk a s) (ltk b s))
  (uniq-orig k m n)
  (operation encryption-test (added-strand keyserv 2)
    (enc k n (ltk a s)) (1 1))
  (traces ((recv m) (send m))
    ((send (cat a b n))
      (recv (cat (enc k n (ltk a s)) (enc k a b (ltk b s))))
      (send (cat (enc m k) (enc k a b (ltk b s)))))
    ((recv (cat a b-0 n))
      (send (cat (enc k n (ltk a s)) (enc k a b-0 (ltk b-0 s))))))
  (label 2)
  (parent 1)
  (unrealized (1 1))
  (comment "1 in cohort - 1 not yet seen"))

(defskeleton kerb-flawed
  (vars (k skey) (m n text) (a s b name))
  (deflistener m)
  (defstrand init 3 (k k) (m m) (n n) (a a) (b b) (s s))
  (defstrand keyserv 2 (k k) (n n) (a a) (b b) (s s))
  (precedes ((1 0) (2 0)) ((1 2) (0 0)) ((2 1) (1 1)))
  (non-orig (ltk a s) (ltk b s))
  (uniq-orig k m n)
  (operation encryption-test (displaced 3 2 keyserv 2)
    (enc k a b-0 (ltk b-0 s)) (1 1))
  (traces ((recv m) (send m))
    ((send (cat a b n))
      (recv (cat (enc k n (ltk a s)) (enc k a b (ltk b s))))
      (send (cat (enc m k) (enc k a b (ltk b s)))))
    ((recv (cat a b n))
      (send (cat (enc k n (ltk a s)) (enc k a b (ltk b s))))))
  (label 3)
  (parent 2)
  (unrealized (0 0))
  (comment "1 in cohort - 1 not yet seen"))

(defskeleton kerb-flawed
  (vars (k skey) (m n text) (a s b name))
  (deflistener m)
  (defstrand init 3 (k k) (m m) (n n) (a a) (b b) (s s))
  (defstrand keyserv 2 (k k) (n n) (a a) (b b) (s s))
  (deflistener k)
  (precedes ((1 0) (2 0)) ((1 2) (0 0)) ((2 1) (1 1)) ((2 1) (3 0))
    ((3 1) (0 0)))
  (non-orig (ltk a s) (ltk b s))
  (uniq-orig k m n)
  (operation nonce-test (added-listener k) m (0 0) (enc m k))
  (traces ((recv m) (send m))
    ((send (cat a b n))
      (recv (cat (enc k n (ltk a s)) (enc k a b (ltk b s))))
      (send (cat (enc m k) (enc k a b (ltk b s)))))
    ((recv (cat a b n))
      (send (cat (enc k n (ltk a s)) (enc k a b (ltk b s)))))
    ((recv k) (send k)))
  (label 4)
  (parent 3)
  (unrealized (3 0))
  (dead)
  (comment "empty cohort"))

(comment "Nothing left to do")

(defprotocol kerb-flawed2 basic
  (defrole init
    (vars (a b s name) (ticket mesg) (m n text) (k skey))
    (trace (send (cat a b n)) (recv (cat (enc k n (ltk a s)) ticket))
      (send (cat (enc m k) ticket)))
    (uniq-orig n))
  (defrole resp
    (vars (a b s name) (m text) (k skey))
    (trace (recv (cat (enc m k) (enc k a b (ltk b s))))))
  (defrole keyserv
    (vars (a b s name) (n text) (k skey))
    (trace (recv (cat a b n))
      (send (cat (enc k n (ltk a s)) (enc k a b (ltk b s)))))
    (uniq-orig k))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false)))))

(defskeleton kerb-flawed2
  (vars (ticket mesg) (k skey) (m n text) (a b s name))
  (deflistener m)
  (defstrand init 3 (ticket ticket) (k k) (m m) (n n) (a a) (b b) (s s))
  (non-orig (ltk a s) (ltk b s))
  (uniq-orig m n)
  (goals
    (forall
      ((ticket mesg) (k skey) (m n text) (a b s name) (z z-0 strd))
      (implies
        (and (p "init" z 3) (p "" z-0 2) (p "init" "ticket" z ticket)
          (p "init" "k" z k) (p "init" "m" z m) (p "init" "n" z n)
          (p "init" "a" z a) (p "init" "b" z b) (p "init" "s" z s)
          (p "" "x" z-0 m) (non (ltk a s)) (non (ltk b s))
          (uniq-at n z 0) (uniq-at m z 2))
        (exists ((b-0 name) (z-1 strd))
          (and (p "keyserv" z-1 2) (p "keyserv" "k" z-1 k)
            (p "keyserv" "n" z-1 n) (p "keyserv" "a" z-1 a)
            (p "keyserv" "b" z-1 b-0) (p "keyserv" "s" z-1 s)
            (prec z 0 z-1 0) (prec z 2 z-0 0) (prec z-1 1 z 1)
            (uniq-at k z-1 1))))))
  (traces ((recv m) (send m))
    ((send (cat a b n)) (recv (cat (enc k n (ltk a s)) ticket))
      (send (cat (enc m k) ticket))))
  (label 5)
  (unrealized (0 0) (1 1))
  (preskeleton)
  (origs (n (1 0)) (m (1 2)))
  (comment "Not a skeleton"))

(defskeleton kerb-flawed2
  (vars (ticket mesg) (k skey) (m n text) (a b s name))
  (deflistener m)
  (defstrand init 3 (ticket ticket) (k k) (m m) (n n) (a a) (b b) (s s))
  (precedes ((1 2) (0 0)))
  (non-orig (ltk a s) (ltk b s))
  (uniq-orig m n)
  (traces ((recv m) (send m))
    ((send (cat a b n)) (recv (cat (enc k n (ltk a s)) ticket))
      (send (cat (enc m k) ticket))))
  (label 6)
  (parent 5)
  (unrealized (1 1))
  (origs (n (1 0)) (m (1 2)))
  (comment "1 in cohort - 1 not yet seen"))

(defskeleton kerb-flawed2
  (vars (ticket mesg) (k skey) (m n text) (a b s b-0 name))
  (deflistener m)
  (defstrand init 3 (ticket ticket) (k k) (m m) (n n) (a a) (b b) (s s))
  (defstrand keyserv 2 (k k) (n n) (a a) (b b-0) (s s))
  (precedes ((1 0) (2 0)) ((1 2) (0 0)) ((2 1) (1 1)))
  (non-orig (ltk a s) (ltk b s))
  (uniq-orig k m n)
  (operation encryption-test (added-strand keyserv 2)
    (enc k n (ltk a s)) (1 1))
  (traces ((recv m) (send m))
    ((send (cat a b n)) (recv (cat (enc k n (ltk a s)) ticket))
      (send (cat (enc m k) ticket)))
    ((recv (cat a b-0 n))
      (send (cat (enc k n (ltk a s)) (enc k a b-0 (ltk b-0 s))))))
  (label 7)
  (parent 6)
  (realized)
  (shape)
  (satisfies yes)
  (maps ((0 1) ((ticket ticket) (k k) (m m) (n n) (a a) (b b) (s s))))
  (origs (k (2 1)) (n (1 0)) (m (1 2))))

(comment "Nothing left to do")
