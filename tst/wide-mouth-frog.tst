(herald "Wide-Mouth Frog Protocol"
  (comment "This protocol has an infinite number of shapes"))

(comment "CPSA 4.3.1")
(comment "All input read from tst/wide-mouth-frog.lsp")

(defprotocol wide-mouth-frog basic
  (defrole init
    (vars (a b t name) (ta text) (k skey))
    (trace (send (cat a (enc ta b k (ltk a t))))))
  (defrole resp
    (vars (a b t name) (k skey) (tb text))
    (trace (recv (enc tb a k (ltk b t)))))
  (defrole ks
    (vars (a b t name) (k skey) (ta tb text))
    (trace (recv (cat a (enc ta b k (ltk a t))))
      (send (enc tb a k (ltk b t)))))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule no-interruption
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (leads-to z0 i0 z2 i2) (trans z1 i1)
          (same-locn z0 i0 z1 i1) (prec z0 i0 z1 i1) (prec z1 i1 z2 i2))
        (false))))
  (defgenrule cakeRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (leads-to z0 i0 z1 i1)
          (leads-to z0 i0 z2 i2) (prec z1 i1 z2 i2)) (false))))
  (defgenrule scissorsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (leads-to z0 i0 z2 i2))
        (and (= z1 z2) (= i1 i2)))))
  (defgenrule invShearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (same-locn z0 i0 z1 i1)
          (leads-to z1 i1 z2 i2) (prec z0 i0 z2 i2))
        (or (and (= z0 z1) (= i0 i1)) (prec z0 i0 z1 i1)))))
  (defgenrule shearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (same-locn z0 i0 z2 i2)
          (prec z0 i0 z2 i2))
        (or (and (= z1 z2) (= i1 i2)) (prec z1 i1 z2 i2))))))

(defskeleton wide-mouth-frog
  (vars (k skey) (ta text) (a t b name))
  (defstrand init 1 (k k) (ta ta) (a a) (b b) (t t))
  (non-orig (ltk a t))
  (uniq-orig k)
  (traces ((send (cat a (enc ta b k (ltk a t))))))
  (label 0)
  (realized)
  (shape)
  (maps ((0) ((a a) (t t) (k k) (b b) (ta ta))))
  (origs (k (0 0))))

(comment "Nothing left to do")

(defprotocol wide-mouth-frog basic
  (defrole init
    (vars (a b t name) (ta text) (k skey))
    (trace (send (cat a (enc ta b k (ltk a t))))))
  (defrole resp
    (vars (a b t name) (k skey) (tb text))
    (trace (recv (enc tb a k (ltk b t)))))
  (defrole ks
    (vars (a b t name) (k skey) (ta tb text))
    (trace (recv (cat a (enc ta b k (ltk a t))))
      (send (enc tb a k (ltk b t)))))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule no-interruption
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (leads-to z0 i0 z2 i2) (trans z1 i1)
          (same-locn z0 i0 z1 i1) (prec z0 i0 z1 i1) (prec z1 i1 z2 i2))
        (false))))
  (defgenrule cakeRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (leads-to z0 i0 z1 i1)
          (leads-to z0 i0 z2 i2) (prec z1 i1 z2 i2)) (false))))
  (defgenrule scissorsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (leads-to z0 i0 z2 i2))
        (and (= z1 z2) (= i1 i2)))))
  (defgenrule invShearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (same-locn z0 i0 z1 i1)
          (leads-to z1 i1 z2 i2) (prec z0 i0 z2 i2))
        (or (and (= z0 z1) (= i0 i1)) (prec z0 i0 z1 i1)))))
  (defgenrule shearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (same-locn z0 i0 z2 i2)
          (prec z0 i0 z2 i2))
        (or (and (= z1 z2) (= i1 i2)) (prec z1 i1 z2 i2))))))

(defskeleton wide-mouth-frog
  (vars (k skey) (tb text) (b t a name))
  (defstrand resp 1 (k k) (tb tb) (a a) (b b) (t t))
  (non-orig (ltk b t))
  (uniq-orig k)
  (traces ((recv (enc tb a k (ltk b t)))))
  (label 1)
  (unrealized (0 0))
  (origs)
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton wide-mouth-frog
  (vars (k skey) (tb text) (b t a name))
  (defstrand resp 1 (k k) (tb tb) (a a) (b b) (t t))
  (defstrand init 1 (k k) (ta tb) (a b) (b a) (t t))
  (precedes ((1 0) (0 0)))
  (non-orig (ltk b t))
  (uniq-orig k)
  (operation encryption-test (added-strand init 1)
    (enc tb a k (ltk b t)) (0 0))
  (traces ((recv (enc tb a k (ltk b t))))
    ((send (cat b (enc tb a k (ltk b t))))))
  (label 2)
  (parent 1)
  (realized)
  (shape)
  (maps ((0) ((b b) (t t) (k k) (a a) (tb tb))))
  (origs (k (1 0))))

(defskeleton wide-mouth-frog
  (vars (k skey) (tb ta text) (b t a name))
  (defstrand resp 1 (k k) (tb tb) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta) (tb tb) (a a) (b b) (t t))
  (precedes ((1 1) (0 0)))
  (non-orig (ltk b t))
  (uniq-orig k)
  (operation encryption-test (added-strand ks 2) (enc tb a k (ltk b t))
    (0 0))
  (traces ((recv (enc tb a k (ltk b t))))
    ((recv (cat a (enc ta b k (ltk a t))))
      (send (enc tb a k (ltk b t)))))
  (label 3)
  (parent 1)
  (realized)
  (shape)
  (maps ((0) ((b b) (t t) (k k) (a a) (tb tb))))
  (origs))

(comment "Nothing left to do")

(defprotocol wide-mouth-frog basic
  (defrole init
    (vars (a b t name) (ta text) (k skey))
    (trace (send (cat a (enc ta b k (ltk a t))))))
  (defrole resp
    (vars (a b t name) (k skey) (tb text))
    (trace (recv (enc tb a k (ltk b t)))))
  (defrole ks
    (vars (a b t name) (k skey) (ta tb text))
    (trace (recv (cat a (enc ta b k (ltk a t))))
      (send (enc tb a k (ltk b t)))))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule no-interruption
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (leads-to z0 i0 z2 i2) (trans z1 i1)
          (same-locn z0 i0 z1 i1) (prec z0 i0 z1 i1) (prec z1 i1 z2 i2))
        (false))))
  (defgenrule cakeRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (leads-to z0 i0 z1 i1)
          (leads-to z0 i0 z2 i2) (prec z1 i1 z2 i2)) (false))))
  (defgenrule scissorsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (leads-to z0 i0 z2 i2))
        (and (= z1 z2) (= i1 i2)))))
  (defgenrule invShearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (same-locn z0 i0 z1 i1)
          (leads-to z1 i1 z2 i2) (prec z0 i0 z2 i2))
        (or (and (= z0 z1) (= i0 i1)) (prec z0 i0 z1 i1)))))
  (defgenrule shearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (same-locn z0 i0 z2 i2)
          (prec z0 i0 z2 i2))
        (or (and (= z1 z2) (= i1 i2)) (prec z1 i1 z2 i2))))))

(defskeleton wide-mouth-frog
  (vars (k skey) (ta tb text) (a b t name))
  (defstrand ks 2 (k k) (ta ta) (tb tb) (a a) (b b) (t t))
  (non-orig (ltk a t) (ltk b t))
  (uniq-orig k)
  (traces
    ((recv (cat a (enc ta b k (ltk a t))))
      (send (enc tb a k (ltk b t)))))
  (label 4)
  (unrealized (0 0))
  (origs)
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton wide-mouth-frog
  (vars (k skey) (ta tb text) (a b t name))
  (defstrand ks 2 (k k) (ta ta) (tb tb) (a a) (b b) (t t))
  (defstrand init 1 (k k) (ta ta) (a a) (b b) (t t))
  (precedes ((1 0) (0 0)))
  (non-orig (ltk a t) (ltk b t))
  (uniq-orig k)
  (operation encryption-test (added-strand init 1)
    (enc ta b k (ltk a t)) (0 0))
  (traces
    ((recv (cat a (enc ta b k (ltk a t))))
      (send (enc tb a k (ltk b t))))
    ((send (cat a (enc ta b k (ltk a t))))))
  (label 5)
  (parent 4)
  (realized)
  (shape)
  (maps ((0) ((a a) (b b) (t t) (k k) (ta ta) (tb tb))))
  (origs (k (1 0))))

(defskeleton wide-mouth-frog
  (vars (k skey) (ta tb ta-0 text) (a b t name))
  (defstrand ks 2 (k k) (ta ta) (tb tb) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-0) (tb ta) (a b) (b a) (t t))
  (precedes ((1 1) (0 0)))
  (non-orig (ltk a t) (ltk b t))
  (uniq-orig k)
  (operation encryption-test (added-strand ks 2) (enc ta b k (ltk a t))
    (0 0))
  (traces
    ((recv (cat a (enc ta b k (ltk a t))))
      (send (enc tb a k (ltk b t))))
    ((recv (cat b (enc ta-0 a k (ltk b t))))
      (send (enc ta b k (ltk a t)))))
  (label 6)
  (parent 4)
  (unrealized (1 0))
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton wide-mouth-frog
  (vars (k skey) (ta tb ta-0 text) (a b t name))
  (defstrand ks 2 (k k) (ta ta) (tb tb) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-0) (tb ta) (a b) (b a) (t t))
  (defstrand init 1 (k k) (ta ta-0) (a b) (b a) (t t))
  (precedes ((1 1) (0 0)) ((2 0) (1 0)))
  (non-orig (ltk a t) (ltk b t))
  (uniq-orig k)
  (operation encryption-test (added-strand init 1)
    (enc ta-0 a k (ltk b t)) (1 0))
  (traces
    ((recv (cat a (enc ta b k (ltk a t))))
      (send (enc tb a k (ltk b t))))
    ((recv (cat b (enc ta-0 a k (ltk b t))))
      (send (enc ta b k (ltk a t))))
    ((send (cat b (enc ta-0 a k (ltk b t))))))
  (label 7)
  (parent 6)
  (realized)
  (shape)
  (maps ((0) ((a a) (b b) (t t) (k k) (ta ta) (tb tb))))
  (origs (k (2 0))))

(defskeleton wide-mouth-frog
  (vars (k skey) (ta tb ta-0 ta-1 text) (a b t name))
  (defstrand ks 2 (k k) (ta ta) (tb tb) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-0) (tb ta) (a b) (b a) (t t))
  (defstrand ks 2 (k k) (ta ta-1) (tb ta-0) (a a) (b b) (t t))
  (precedes ((1 1) (0 0)) ((2 1) (1 0)))
  (non-orig (ltk a t) (ltk b t))
  (uniq-orig k)
  (operation encryption-test (added-strand ks 2)
    (enc ta-0 a k (ltk b t)) (1 0))
  (traces
    ((recv (cat a (enc ta b k (ltk a t))))
      (send (enc tb a k (ltk b t))))
    ((recv (cat b (enc ta-0 a k (ltk b t))))
      (send (enc ta b k (ltk a t))))
    ((recv (cat a (enc ta-1 b k (ltk a t))))
      (send (enc ta-0 a k (ltk b t)))))
  (label 8)
  (parent 6)
  (unrealized (2 0))
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton wide-mouth-frog
  (vars (k skey) (ta tb ta-0 ta-1 text) (a b t name))
  (defstrand ks 2 (k k) (ta ta) (tb tb) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-0) (tb ta) (a b) (b a) (t t))
  (defstrand ks 2 (k k) (ta ta-1) (tb ta-0) (a a) (b b) (t t))
  (defstrand init 1 (k k) (ta ta-1) (a a) (b b) (t t))
  (precedes ((1 1) (0 0)) ((2 1) (1 0)) ((3 0) (2 0)))
  (non-orig (ltk a t) (ltk b t))
  (uniq-orig k)
  (operation encryption-test (added-strand init 1)
    (enc ta-1 b k (ltk a t)) (2 0))
  (traces
    ((recv (cat a (enc ta b k (ltk a t))))
      (send (enc tb a k (ltk b t))))
    ((recv (cat b (enc ta-0 a k (ltk b t))))
      (send (enc ta b k (ltk a t))))
    ((recv (cat a (enc ta-1 b k (ltk a t))))
      (send (enc ta-0 a k (ltk b t))))
    ((send (cat a (enc ta-1 b k (ltk a t))))))
  (label 9)
  (parent 8)
  (realized)
  (shape)
  (maps ((0) ((a a) (b b) (t t) (k k) (ta ta) (tb tb))))
  (origs (k (3 0))))

(defskeleton wide-mouth-frog
  (vars (k skey) (ta tb ta-0 ta-1 ta-2 text) (a b t name))
  (defstrand ks 2 (k k) (ta ta) (tb tb) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-0) (tb ta) (a b) (b a) (t t))
  (defstrand ks 2 (k k) (ta ta-1) (tb ta-0) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-2) (tb ta-1) (a b) (b a) (t t))
  (precedes ((1 1) (0 0)) ((2 1) (1 0)) ((3 1) (2 0)))
  (non-orig (ltk a t) (ltk b t))
  (uniq-orig k)
  (operation encryption-test (added-strand ks 2)
    (enc ta-1 b k (ltk a t)) (2 0))
  (traces
    ((recv (cat a (enc ta b k (ltk a t))))
      (send (enc tb a k (ltk b t))))
    ((recv (cat b (enc ta-0 a k (ltk b t))))
      (send (enc ta b k (ltk a t))))
    ((recv (cat a (enc ta-1 b k (ltk a t))))
      (send (enc ta-0 a k (ltk b t))))
    ((recv (cat b (enc ta-2 a k (ltk b t))))
      (send (enc ta-1 b k (ltk a t)))))
  (label 10)
  (parent 8)
  (unrealized (3 0))
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton wide-mouth-frog
  (vars (k skey) (ta tb ta-0 ta-1 ta-2 text) (a b t name))
  (defstrand ks 2 (k k) (ta ta) (tb tb) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-0) (tb ta) (a b) (b a) (t t))
  (defstrand ks 2 (k k) (ta ta-1) (tb ta-0) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-2) (tb ta-1) (a b) (b a) (t t))
  (defstrand init 1 (k k) (ta ta-2) (a b) (b a) (t t))
  (precedes ((1 1) (0 0)) ((2 1) (1 0)) ((3 1) (2 0)) ((4 0) (3 0)))
  (non-orig (ltk a t) (ltk b t))
  (uniq-orig k)
  (operation encryption-test (added-strand init 1)
    (enc ta-2 a k (ltk b t)) (3 0))
  (traces
    ((recv (cat a (enc ta b k (ltk a t))))
      (send (enc tb a k (ltk b t))))
    ((recv (cat b (enc ta-0 a k (ltk b t))))
      (send (enc ta b k (ltk a t))))
    ((recv (cat a (enc ta-1 b k (ltk a t))))
      (send (enc ta-0 a k (ltk b t))))
    ((recv (cat b (enc ta-2 a k (ltk b t))))
      (send (enc ta-1 b k (ltk a t))))
    ((send (cat b (enc ta-2 a k (ltk b t))))))
  (label 11)
  (parent 10)
  (realized)
  (shape)
  (maps ((0) ((a a) (b b) (t t) (k k) (ta ta) (tb tb))))
  (origs (k (4 0))))

(defskeleton wide-mouth-frog
  (vars (k skey) (ta tb ta-0 ta-1 ta-2 ta-3 text) (a b t name))
  (defstrand ks 2 (k k) (ta ta) (tb tb) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-0) (tb ta) (a b) (b a) (t t))
  (defstrand ks 2 (k k) (ta ta-1) (tb ta-0) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-2) (tb ta-1) (a b) (b a) (t t))
  (defstrand ks 2 (k k) (ta ta-3) (tb ta-2) (a a) (b b) (t t))
  (precedes ((1 1) (0 0)) ((2 1) (1 0)) ((3 1) (2 0)) ((4 1) (3 0)))
  (non-orig (ltk a t) (ltk b t))
  (uniq-orig k)
  (operation encryption-test (added-strand ks 2)
    (enc ta-2 a k (ltk b t)) (3 0))
  (traces
    ((recv (cat a (enc ta b k (ltk a t))))
      (send (enc tb a k (ltk b t))))
    ((recv (cat b (enc ta-0 a k (ltk b t))))
      (send (enc ta b k (ltk a t))))
    ((recv (cat a (enc ta-1 b k (ltk a t))))
      (send (enc ta-0 a k (ltk b t))))
    ((recv (cat b (enc ta-2 a k (ltk b t))))
      (send (enc ta-1 b k (ltk a t))))
    ((recv (cat a (enc ta-3 b k (ltk a t))))
      (send (enc ta-2 a k (ltk b t)))))
  (label 12)
  (parent 10)
  (unrealized (4 0))
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton wide-mouth-frog
  (vars (k skey) (ta tb ta-0 ta-1 ta-2 ta-3 text) (a b t name))
  (defstrand ks 2 (k k) (ta ta) (tb tb) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-0) (tb ta) (a b) (b a) (t t))
  (defstrand ks 2 (k k) (ta ta-1) (tb ta-0) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-2) (tb ta-1) (a b) (b a) (t t))
  (defstrand ks 2 (k k) (ta ta-3) (tb ta-2) (a a) (b b) (t t))
  (defstrand init 1 (k k) (ta ta-3) (a a) (b b) (t t))
  (precedes ((1 1) (0 0)) ((2 1) (1 0)) ((3 1) (2 0)) ((4 1) (3 0))
    ((5 0) (4 0)))
  (non-orig (ltk a t) (ltk b t))
  (uniq-orig k)
  (operation encryption-test (added-strand init 1)
    (enc ta-3 b k (ltk a t)) (4 0))
  (traces
    ((recv (cat a (enc ta b k (ltk a t))))
      (send (enc tb a k (ltk b t))))
    ((recv (cat b (enc ta-0 a k (ltk b t))))
      (send (enc ta b k (ltk a t))))
    ((recv (cat a (enc ta-1 b k (ltk a t))))
      (send (enc ta-0 a k (ltk b t))))
    ((recv (cat b (enc ta-2 a k (ltk b t))))
      (send (enc ta-1 b k (ltk a t))))
    ((recv (cat a (enc ta-3 b k (ltk a t))))
      (send (enc ta-2 a k (ltk b t))))
    ((send (cat a (enc ta-3 b k (ltk a t))))))
  (label 13)
  (parent 12)
  (realized)
  (shape)
  (maps ((0) ((a a) (b b) (t t) (k k) (ta ta) (tb tb))))
  (origs (k (5 0))))

(defskeleton wide-mouth-frog
  (vars (k skey) (ta tb ta-0 ta-1 ta-2 ta-3 ta-4 text) (a b t name))
  (defstrand ks 2 (k k) (ta ta) (tb tb) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-0) (tb ta) (a b) (b a) (t t))
  (defstrand ks 2 (k k) (ta ta-1) (tb ta-0) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-2) (tb ta-1) (a b) (b a) (t t))
  (defstrand ks 2 (k k) (ta ta-3) (tb ta-2) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-4) (tb ta-3) (a b) (b a) (t t))
  (precedes ((1 1) (0 0)) ((2 1) (1 0)) ((3 1) (2 0)) ((4 1) (3 0))
    ((5 1) (4 0)))
  (non-orig (ltk a t) (ltk b t))
  (uniq-orig k)
  (operation encryption-test (added-strand ks 2)
    (enc ta-3 b k (ltk a t)) (4 0))
  (traces
    ((recv (cat a (enc ta b k (ltk a t))))
      (send (enc tb a k (ltk b t))))
    ((recv (cat b (enc ta-0 a k (ltk b t))))
      (send (enc ta b k (ltk a t))))
    ((recv (cat a (enc ta-1 b k (ltk a t))))
      (send (enc ta-0 a k (ltk b t))))
    ((recv (cat b (enc ta-2 a k (ltk b t))))
      (send (enc ta-1 b k (ltk a t))))
    ((recv (cat a (enc ta-3 b k (ltk a t))))
      (send (enc ta-2 a k (ltk b t))))
    ((recv (cat b (enc ta-4 a k (ltk b t))))
      (send (enc ta-3 b k (ltk a t)))))
  (label 14)
  (parent 12)
  (unrealized (5 0))
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton wide-mouth-frog
  (vars (k skey) (ta tb ta-0 ta-1 ta-2 ta-3 ta-4 text) (a b t name))
  (defstrand ks 2 (k k) (ta ta) (tb tb) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-0) (tb ta) (a b) (b a) (t t))
  (defstrand ks 2 (k k) (ta ta-1) (tb ta-0) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-2) (tb ta-1) (a b) (b a) (t t))
  (defstrand ks 2 (k k) (ta ta-3) (tb ta-2) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-4) (tb ta-3) (a b) (b a) (t t))
  (defstrand init 1 (k k) (ta ta-4) (a b) (b a) (t t))
  (precedes ((1 1) (0 0)) ((2 1) (1 0)) ((3 1) (2 0)) ((4 1) (3 0))
    ((5 1) (4 0)) ((6 0) (5 0)))
  (non-orig (ltk a t) (ltk b t))
  (uniq-orig k)
  (operation encryption-test (added-strand init 1)
    (enc ta-4 a k (ltk b t)) (5 0))
  (traces
    ((recv (cat a (enc ta b k (ltk a t))))
      (send (enc tb a k (ltk b t))))
    ((recv (cat b (enc ta-0 a k (ltk b t))))
      (send (enc ta b k (ltk a t))))
    ((recv (cat a (enc ta-1 b k (ltk a t))))
      (send (enc ta-0 a k (ltk b t))))
    ((recv (cat b (enc ta-2 a k (ltk b t))))
      (send (enc ta-1 b k (ltk a t))))
    ((recv (cat a (enc ta-3 b k (ltk a t))))
      (send (enc ta-2 a k (ltk b t))))
    ((recv (cat b (enc ta-4 a k (ltk b t))))
      (send (enc ta-3 b k (ltk a t))))
    ((send (cat b (enc ta-4 a k (ltk b t))))))
  (label 15)
  (parent 14)
  (realized)
  (shape)
  (maps ((0) ((a a) (b b) (t t) (k k) (ta ta) (tb tb))))
  (origs (k (6 0))))

(defskeleton wide-mouth-frog
  (vars (k skey) (ta tb ta-0 ta-1 ta-2 ta-3 ta-4 ta-5 text)
    (a b t name))
  (defstrand ks 2 (k k) (ta ta) (tb tb) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-0) (tb ta) (a b) (b a) (t t))
  (defstrand ks 2 (k k) (ta ta-1) (tb ta-0) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-2) (tb ta-1) (a b) (b a) (t t))
  (defstrand ks 2 (k k) (ta ta-3) (tb ta-2) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-4) (tb ta-3) (a b) (b a) (t t))
  (defstrand ks 2 (k k) (ta ta-5) (tb ta-4) (a a) (b b) (t t))
  (precedes ((1 1) (0 0)) ((2 1) (1 0)) ((3 1) (2 0)) ((4 1) (3 0))
    ((5 1) (4 0)) ((6 1) (5 0)))
  (non-orig (ltk a t) (ltk b t))
  (uniq-orig k)
  (operation encryption-test (added-strand ks 2)
    (enc ta-4 a k (ltk b t)) (5 0))
  (traces
    ((recv (cat a (enc ta b k (ltk a t))))
      (send (enc tb a k (ltk b t))))
    ((recv (cat b (enc ta-0 a k (ltk b t))))
      (send (enc ta b k (ltk a t))))
    ((recv (cat a (enc ta-1 b k (ltk a t))))
      (send (enc ta-0 a k (ltk b t))))
    ((recv (cat b (enc ta-2 a k (ltk b t))))
      (send (enc ta-1 b k (ltk a t))))
    ((recv (cat a (enc ta-3 b k (ltk a t))))
      (send (enc ta-2 a k (ltk b t))))
    ((recv (cat b (enc ta-4 a k (ltk b t))))
      (send (enc ta-3 b k (ltk a t))))
    ((recv (cat a (enc ta-5 b k (ltk a t))))
      (send (enc ta-4 a k (ltk b t)))))
  (label 16)
  (parent 14)
  (unrealized (6 0))
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton wide-mouth-frog
  (vars (k skey) (ta tb ta-0 ta-1 ta-2 ta-3 ta-4 ta-5 text)
    (a b t name))
  (defstrand ks 2 (k k) (ta ta) (tb tb) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-0) (tb ta) (a b) (b a) (t t))
  (defstrand ks 2 (k k) (ta ta-1) (tb ta-0) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-2) (tb ta-1) (a b) (b a) (t t))
  (defstrand ks 2 (k k) (ta ta-3) (tb ta-2) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-4) (tb ta-3) (a b) (b a) (t t))
  (defstrand ks 2 (k k) (ta ta-5) (tb ta-4) (a a) (b b) (t t))
  (defstrand init 1 (k k) (ta ta-5) (a a) (b b) (t t))
  (precedes ((1 1) (0 0)) ((2 1) (1 0)) ((3 1) (2 0)) ((4 1) (3 0))
    ((5 1) (4 0)) ((6 1) (5 0)) ((7 0) (6 0)))
  (non-orig (ltk a t) (ltk b t))
  (uniq-orig k)
  (operation encryption-test (added-strand init 1)
    (enc ta-5 b k (ltk a t)) (6 0))
  (traces
    ((recv (cat a (enc ta b k (ltk a t))))
      (send (enc tb a k (ltk b t))))
    ((recv (cat b (enc ta-0 a k (ltk b t))))
      (send (enc ta b k (ltk a t))))
    ((recv (cat a (enc ta-1 b k (ltk a t))))
      (send (enc ta-0 a k (ltk b t))))
    ((recv (cat b (enc ta-2 a k (ltk b t))))
      (send (enc ta-1 b k (ltk a t))))
    ((recv (cat a (enc ta-3 b k (ltk a t))))
      (send (enc ta-2 a k (ltk b t))))
    ((recv (cat b (enc ta-4 a k (ltk b t))))
      (send (enc ta-3 b k (ltk a t))))
    ((recv (cat a (enc ta-5 b k (ltk a t))))
      (send (enc ta-4 a k (ltk b t))))
    ((send (cat a (enc ta-5 b k (ltk a t))))))
  (label 17)
  (parent 16)
  (realized)
  (shape)
  (maps ((0) ((a a) (b b) (t t) (k k) (ta ta) (tb tb))))
  (origs (k (7 0))))

(comment "Strand bound exceeded--aborting run")

(defskeleton wide-mouth-frog
  (vars (k skey) (ta tb ta-0 ta-1 ta-2 ta-3 ta-4 ta-5 ta-6 text)
    (a b t name))
  (defstrand ks 2 (k k) (ta ta) (tb tb) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-0) (tb ta) (a b) (b a) (t t))
  (defstrand ks 2 (k k) (ta ta-1) (tb ta-0) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-2) (tb ta-1) (a b) (b a) (t t))
  (defstrand ks 2 (k k) (ta ta-3) (tb ta-2) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-4) (tb ta-3) (a b) (b a) (t t))
  (defstrand ks 2 (k k) (ta ta-5) (tb ta-4) (a a) (b b) (t t))
  (defstrand ks 2 (k k) (ta ta-6) (tb ta-5) (a b) (b a) (t t))
  (precedes ((1 1) (0 0)) ((2 1) (1 0)) ((3 1) (2 0)) ((4 1) (3 0))
    ((5 1) (4 0)) ((6 1) (5 0)) ((7 1) (6 0)))
  (non-orig (ltk a t) (ltk b t))
  (uniq-orig k)
  (operation encryption-test (added-strand ks 2)
    (enc ta-5 b k (ltk a t)) (6 0))
  (traces
    ((recv (cat a (enc ta b k (ltk a t))))
      (send (enc tb a k (ltk b t))))
    ((recv (cat b (enc ta-0 a k (ltk b t))))
      (send (enc ta b k (ltk a t))))
    ((recv (cat a (enc ta-1 b k (ltk a t))))
      (send (enc ta-0 a k (ltk b t))))
    ((recv (cat b (enc ta-2 a k (ltk b t))))
      (send (enc ta-1 b k (ltk a t))))
    ((recv (cat a (enc ta-3 b k (ltk a t))))
      (send (enc ta-2 a k (ltk b t))))
    ((recv (cat b (enc ta-4 a k (ltk b t))))
      (send (enc ta-3 b k (ltk a t))))
    ((recv (cat a (enc ta-5 b k (ltk a t))))
      (send (enc ta-4 a k (ltk b t))))
    ((recv (cat b (enc ta-6 a k (ltk b t))))
      (send (enc ta-5 b k (ltk a t)))))
  (label 18)
  (parent 16)
  (unrealized (7 0))
  (aborted)
  (comment "aborted"))
